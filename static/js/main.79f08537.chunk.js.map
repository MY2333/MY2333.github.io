{"version":3,"sources":["api/weatherApi.js","App.js","actions/sampleAction.js","actions/types.js","serviceWorker.js","reducers/sampleReducer.js","index.js","store/configureStore.jsx"],"names":["axios","get","then","res","data","weather","description","catch","err","Error","message","App","getQuote","that","console","log","q","quote","au","author","setState","error","buttonClick","props","sampleAction","state","this","sampleState","counterVal","className","contenteditable","src","height","width","alt","onClick","href","React","Component","connect","sampleReducer","dispatch","weatherApi","type","Boolean","window","location","hostname","match","action","store","redux","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uSAEe,EACC,WACR,OAAOA,IAAMC,IAAI,oGAChBC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,KAAKC,QAAQ,GAAGC,eACjCC,OAAM,SAASC,GACZ,MAAM,IAAIC,MAAMD,EAAIE,a,OCA1BC,E,kDAEJ,aAAc,IAAD,8BACX,gBAqBFC,SAAW,WACT,IAAMC,EAAI,eACVb,IAAMC,IAAI,qIACTC,MAAK,SAASC,GACbW,QAAQC,IAAIZ,GACZ,IAAMa,EAAIb,EAAIC,KAAK,GAAGa,MAChBC,EAAKf,EAAIC,KAAK,GAAGe,OACvBN,EAAKO,SAAS,CAACH,MAAMD,EAAGG,OAAQD,OAEjCX,OAAM,SAAUc,GACfP,QAAQC,IAAIM,OAhCH,EAqCbC,YAAc,WACZ,EAAKC,MAAMC,gBApCX,EAAKC,MAAQ,CACXR,MAAO,KACPE,OAAQ,MAJC,E,qPAyCJ,IAAD,SACkBO,KAAKD,MAAtBR,EADD,EACCA,MAAOE,EADR,EACQA,OACNQ,EAAgBD,KAAKH,MAAMK,WAA3BD,YACR,OACE,6BACE,yBAAKE,UAAU,OACb,yBAAKA,UAAU,OAAOC,gBAAgB,QACpC,yBAAKD,UAAU,OACb,yBAAKE,IAAI,WAAWC,OAAO,MAAMC,MAAM,MAAMC,IAAI,MACjD,uBAAGL,UAAU,QACX,iDAEF,uBAAGA,UAAU,SACX,2BAAIZ,EAAJ,OAAeE,MAIrB,yBAAKU,UAAU,SACb,yBAAKA,UAAU,gBACb,8CACA,wBAAIA,UAAU,UACZ,2DACA,gDACA,4CAGJ,yBAAKA,UAAU,gBAAe,8CAC5B,wBAAIA,UAAU,UACZ,6FACA,wDAGJ,yBAAKA,UAAU,eAAeM,QAAS,kBAAM,EAAKb,gBAAlD,0BAGA,2BAAG,gCAASK,MAGhB,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,4CAEF,uBAAGA,UAAU,OACV,uBAAGO,KAAK,6BAAR,gB,GAtFKC,IAAMC,WAmGTC,eALS,SAAC,GAAD,MAAwB,CAC9CX,WADsB,EAAGY,iBAKa,CAAChB,aChGb,kBAAM,SAACiB,GAE/BC,IAEGxC,MAAK,SAACC,GACLsC,EAXG,CACHE,KCL0B,qBDM1BhB,YASuBxB,OAExBI,OAAM,SAACC,GACNM,QAAQC,IAAIP,MAGhBM,QAAQC,IAAI,4BDqFDwB,CAAyC5B,GG9FpCiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBOR,EAAgB,WAAsB,IAArBf,EAAoB,uDAAd,EAAGwB,EAAW,uCAC9C,OAAQA,EAAON,MACX,IFJ0B,qBEMtB,OADA7B,QAAQC,IAAI,uBACL,CACHY,YAAasB,EAAOtB,aAE5B,QACI,OAAOF,I,QCFbyB,ECCYC,IAJQA,IAAsB,CACxCX,cAAeA,IAGwBW,IAAsBC,MDCrEC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAQA,GAChB,kBAAC,EAAD,OAEFK,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdtD,OAAM,SAAAc,GACLP,QAAQO,MAAMA,EAAMX,c","file":"static/js/main.79f08537.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default {\r\n    getWeather: () => {\r\n        return axios.get('https://api.openweathermap.org/data/2.5/weather?q=Toronto&appid=a97f9aa187acc84f2e13a9ba46dfc714')\r\n        .then( res => res.data.weather[0].description)\r\n        .catch(function(err) {\r\n            throw new Error(err.message)\r\n        })\r\n    },\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport { sampleAction } from './actions/sampleAction'\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass App extends React.Component{\r\n  \r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      quote: null,\r\n      author: null,\r\n    }\r\n  }\r\n  componentWillMount() {\r\n    // this.getQuote()\r\n  }\r\n\r\n\r\n\r\n  componentWillReceiveProps() {\r\n  }\r\n\r\n  componentWillUpdate() {\r\n  }\r\n\r\n  componentDidUpdate() {\r\n  }\r\n\r\n  getQuote = () => {\r\n    const that = this;\r\n    axios.get('https://andruxnet-random-famous-quotes.p.rapidapi.com/?rapidapi-key=d1414469b9msh295dcc0f1350df1p127c99jsnda11b5f49959&cat=famous')\r\n    .then(function(res){\r\n      console.log(res);\r\n      const q = res.data[0].quote\r\n      const au = res.data[0].author\r\n      that.setState({quote:q, author: au})\r\n    })\r\n    .catch(function (error){\r\n      console.log(error)\r\n    })\r\n  }\r\n  \r\n\r\n  buttonClick = () => {\r\n    this.props.sampleAction();\r\n  }\r\n\r\n  render(){\r\n    const {quote, author} = this.state;\r\n    const { sampleState } = this.props.counterVal;\r\n    return (\r\n      <div>\r\n        <div className=\"App\">\r\n          <div className=\"left\" contenteditable=\"true\">\r\n            <div className=\"pic\">\r\n              <img src=\"./Ma.jpg\" height=\"120\" width=\"100\" alt=\"M\"/>\r\n              <p className=\"name\">\r\n                <strong>Margaret Yao</strong> \r\n              </p>\r\n              <p className='quote'>\r\n                <i>{quote} -- {author}</i>\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"right\">\r\n            <div className=\"right-header\">\r\n              <header>Background</header>\r\n              <ul className=\"App-ul\">\r\n                <li>Second year student at UofT</li>\r\n                <li>Computer Science</li>\r\n                <li>Mathmatics</li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"right-header\"><header>Experience</header>\r\n              <ul className=\"App-ul\">\r\n                <li>Computer Science Club President in St. Joseph College in 2019</li>\r\n                <li>Teach in Wells Academy</li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"right-header\" onClick={() => this.buttonClick()}>\r\n              Weather in Toronto is:\r\n              </div>\r\n            <p><strong>{sampleState}</strong></p>\r\n          </div>\r\n        </div>\r\n        <div className=\"bot\">\r\n          <header className=\"bot-header\">\r\n            <strong>Contact</strong>\r\n          </header>\r\n          <p className=\"inf\">\r\n             <a href=\"mailto:yaoxinyv@gmail.com\">email</a>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ sampleReducer }) => ({\r\n  counterVal: sampleReducer\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, {sampleAction})(App);","import {SAMPLE_ACTION_TYPE} from './types';\r\nimport weatherApi from '../api/weatherApi';\r\n\r\nexport const weatherUpdate = (payload) => {\r\n    return {\r\n        type: SAMPLE_ACTION_TYPE,\r\n        sampleState: payload\r\n    }\r\n}\r\n\r\nexport const sampleAction = () => (dispatch) => {\r\n\r\n    weatherApi\r\n      .getWeather()\r\n      .then((res) => {\r\n        dispatch(weatherUpdate(res));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    console.log('Action Creater Called');\r\n};","export const SAMPLE_ACTION_TYPE = 'sample_action_type';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { SAMPLE_ACTION_TYPE } from '../actions/types';\r\n\r\nexport const sampleReducer = (state=0, action) => {\r\n    switch (action.type) {\r\n        case SAMPLE_ACTION_TYPE:\r\n            console.log('Reducer got actions');\r\n            return {\r\n                sampleState: action.sampleState\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as configureStore from './store/configureStore.jsx';\r\n\r\nconst store = configureStore.configure();\r\n\r\nReactDOM.render(\r\n  <Provider store ={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import * as redux from 'redux';\r\nimport {sampleReducer} from '../reducers/sampleReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const configure = () => {\r\n    const reducer = () => redux.combineReducers({\r\n        sampleReducer: sampleReducer,\r\n    });\r\n\r\n    const store = redux.createStore(reducer(), redux.applyMiddleware(thunk));\r\n    return store;\r\n}"],"sourceRoot":""}